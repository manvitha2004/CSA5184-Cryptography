 def toLowerCase(text): return text.lower()
def removeSpaces(text): return "".join(i for i in text if i != " ")
def Diagraph(text): return [text[i:i+2] for i in range(0, len(text), 2)]
def FillerLetter(text):
    for i in range(0, len(text) - 1, 2):
        if text[i] == text[i + 1]:
            text = text[:i+1] + 'x' + text[i+1:]
            return FillerLetter(text)
    return text

list1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm',
         'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
def generateKeyTable(word, list1):
    key_letters = list(dict.fromkeys(word))
    compElements = key_letters + [i for i in list1 if i not in key_letters]
    return [compElements[i:i+5] for i in range(0, len(compElements), 5)]

def search(mat, element):
    for i, row in enumerate(mat):
        if element in row:
            return i, row.index(element)

def encrypt_RowRule(matr, e1r, e1c, e2r, e2c):
    return matr[e1r][(e1c+1)%5], matr[e2r][(e2c+1)%5]

def encrypt_ColumnRule(matr, e1r, e1c, e2r, e2c):
    return matr[(e1r+1)%5][e1c], matr[(e2r+1)%5][e2c]

def encrypt_RectangleRule(matr, e1r, e1c, e2r, e2c):
    return matr[e1r][e2c], matr[e2r][e1c]

def encryptByPlayfairCipher(Matrix, plainList):
    CipherList = []
    for pair in plainList:
        ele1_x, ele1_y = search(Matrix, pair[0])
        ele2_x, ele2_y = search(Matrix, pair[1])
        if ele1_x == ele2_x:
            c1, c2 = encrypt_RowRule(Matrix, ele1_x, ele1_y, ele2_x, ele2_y)
        elif ele1_y == ele2_y:
            c1, c2 = encrypt_ColumnRule(Matrix, ele1_x, ele1_y, ele2_x, ele2_y)
        else:
            c1, c2 = encrypt_RectangleRule(Matrix, ele1_x, ele1_y, ele2_x, ele2_y)
        CipherList.append(c1 + c2)
    return CipherList

text_Plain = 'hello'
text_Plain = FillerLetter(removeSpaces(toLowerCase(text_Plain)))
PlainTextList = Diagraph(text_Plain + 'z' if len(text_Plain) % 2 == 1 else text_Plain)

key = "network"
Matrix = generateKeyTable(toLowerCase(key), list1)

CipherList = encryptByPlayfairCipher(Matrix, PlainTextList)
print("Key text:", key)
print("Plain Text:", text_Plain)
print("CipherText:", "".join(CipherList))
